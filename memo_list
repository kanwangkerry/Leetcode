four sum: need to traverse from 2 side

anagram: hash, sort string.

get the min: set min=a[0], but take care with size =0;

always remember: input is null;

2 loops in DP: take care of the order of the loop. 
for(j = 0 ; j < len ;j++)
	for(i = 0 ; i < len -j; i++)
		a[i][i+j]...

longestSubstring without repeating: dp. ***

container with most water: from 2 side. ***

generate parenthesis: order affects;

use list: remember to initial the head;

reverse k-group: take care of what is the acutal prev;

kmp: strstr

divide 2 integers: take care of many interger types. 2 minus, -2147483648, overflow, use minus when number is large because minus will not overflow. -(-2147483648) is overflow

substring with concatenation of all words. not hard, try next time.

longest parenthese: use stack

soduku: backtrace model.


sort or general problem: take of the accumulation on previous ones.
Example: 
people i's cost of time is ci, process time is ti. calculate the total cost of n people (people will have to wait when others are under processing)

programming challenges: chapter 5 is hard.

leetcode: too much function calls may cause TLE in java.
when figuring out max or min: remember negative, everytime you add sth, consider negative.

consider about reusing the memory (pascal triangle)

remeber to read traverse with stack.

very long time: recover tree

how to use priority queue: mrege k sorted list
